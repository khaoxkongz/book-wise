/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WebRouteRouteImport } from './routes/_web.route'
import { Route as DashboardRouteRouteImport } from './routes/_dashboard.route'
import { Route as AuthRouteRouteImport } from './routes/_auth.route'
import { Route as WebIndexRouteImport } from './routes/_web.index'
import { Route as WebProfileRouteImport } from './routes/_web.profile'
import { Route as DashboardUserRouteImport } from './routes/_dashboard.user'
import { Route as DashboardDashboardRouteImport } from './routes/_dashboard.dashboard'
import { Route as DashboardBorrowRequestsRouteImport } from './routes/_dashboard.borrow-requests'
import { Route as DashboardAccountRequestsRouteImport } from './routes/_dashboard.account-requests'
import { Route as AuthRegisterRouteImport } from './routes/_auth.register'
import { Route as AuthLoginRouteImport } from './routes/_auth.login'
import { Route as WebBooksRouteRouteImport } from './routes/_web.books.route'
import { Route as DashboardBooksManagementRouteRouteImport } from './routes/_dashboard.books-management.route'
import { Route as WebBooksIndexRouteImport } from './routes/_web.books.index'
import { Route as DashboardBooksManagementIndexRouteImport } from './routes/_dashboard.books-management.index'
import { Route as WebBooksIdRouteImport } from './routes/_web.books.$id'
import { Route as DashboardBooksManagementCreateRouteImport } from './routes/_dashboard.books-management.create'
import { Route as DashboardBooksManagementIdIndexRouteImport } from './routes/_dashboard.books-management.$id.index'
import { Route as DashboardBooksManagementIdEditRouteImport } from './routes/_dashboard.books-management.$id.edit'

const WebRouteRoute = WebRouteRouteImport.update({
  id: '/_web',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const WebIndexRoute = WebIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WebRouteRoute,
} as any)
const WebProfileRoute = WebProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => WebRouteRoute,
} as any)
const DashboardUserRoute = DashboardUserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardDashboardRoute = DashboardDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardBorrowRequestsRoute = DashboardBorrowRequestsRouteImport.update({
  id: '/borrow-requests',
  path: '/borrow-requests',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardAccountRequestsRoute =
  DashboardAccountRequestsRouteImport.update({
    id: '/account-requests',
    path: '/account-requests',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const WebBooksRouteRoute = WebBooksRouteRouteImport.update({
  id: '/books',
  path: '/books',
  getParentRoute: () => WebRouteRoute,
} as any)
const DashboardBooksManagementRouteRoute =
  DashboardBooksManagementRouteRouteImport.update({
    id: '/books-management',
    path: '/books-management',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const WebBooksIndexRoute = WebBooksIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WebBooksRouteRoute,
} as any)
const DashboardBooksManagementIndexRoute =
  DashboardBooksManagementIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardBooksManagementRouteRoute,
  } as any)
const WebBooksIdRoute = WebBooksIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => WebBooksRouteRoute,
} as any)
const DashboardBooksManagementCreateRoute =
  DashboardBooksManagementCreateRouteImport.update({
    id: '/create',
    path: '/create',
    getParentRoute: () => DashboardBooksManagementRouteRoute,
  } as any)
const DashboardBooksManagementIdIndexRoute =
  DashboardBooksManagementIdIndexRouteImport.update({
    id: '/$id/',
    path: '/$id/',
    getParentRoute: () => DashboardBooksManagementRouteRoute,
  } as any)
const DashboardBooksManagementIdEditRoute =
  DashboardBooksManagementIdEditRouteImport.update({
    id: '/$id/edit',
    path: '/$id/edit',
    getParentRoute: () => DashboardBooksManagementRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/books-management': typeof DashboardBooksManagementRouteRouteWithChildren
  '/books': typeof WebBooksRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/account-requests': typeof DashboardAccountRequestsRoute
  '/borrow-requests': typeof DashboardBorrowRequestsRoute
  '/dashboard': typeof DashboardDashboardRoute
  '/user': typeof DashboardUserRoute
  '/profile': typeof WebProfileRoute
  '/': typeof WebIndexRoute
  '/books-management/create': typeof DashboardBooksManagementCreateRoute
  '/books/$id': typeof WebBooksIdRoute
  '/books-management/': typeof DashboardBooksManagementIndexRoute
  '/books/': typeof WebBooksIndexRoute
  '/books-management/$id/edit': typeof DashboardBooksManagementIdEditRoute
  '/books-management/$id': typeof DashboardBooksManagementIdIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/account-requests': typeof DashboardAccountRequestsRoute
  '/borrow-requests': typeof DashboardBorrowRequestsRoute
  '/dashboard': typeof DashboardDashboardRoute
  '/user': typeof DashboardUserRoute
  '/profile': typeof WebProfileRoute
  '/': typeof WebIndexRoute
  '/books-management/create': typeof DashboardBooksManagementCreateRoute
  '/books/$id': typeof WebBooksIdRoute
  '/books-management': typeof DashboardBooksManagementIndexRoute
  '/books': typeof WebBooksIndexRoute
  '/books-management/$id/edit': typeof DashboardBooksManagementIdEditRoute
  '/books-management/$id': typeof DashboardBooksManagementIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/_web': typeof WebRouteRouteWithChildren
  '/_dashboard/books-management': typeof DashboardBooksManagementRouteRouteWithChildren
  '/_web/books': typeof WebBooksRouteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_dashboard/account-requests': typeof DashboardAccountRequestsRoute
  '/_dashboard/borrow-requests': typeof DashboardBorrowRequestsRoute
  '/_dashboard/dashboard': typeof DashboardDashboardRoute
  '/_dashboard/user': typeof DashboardUserRoute
  '/_web/profile': typeof WebProfileRoute
  '/_web/': typeof WebIndexRoute
  '/_dashboard/books-management/create': typeof DashboardBooksManagementCreateRoute
  '/_web/books/$id': typeof WebBooksIdRoute
  '/_dashboard/books-management/': typeof DashboardBooksManagementIndexRoute
  '/_web/books/': typeof WebBooksIndexRoute
  '/_dashboard/books-management/$id/edit': typeof DashboardBooksManagementIdEditRoute
  '/_dashboard/books-management/$id/': typeof DashboardBooksManagementIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/books-management'
    | '/books'
    | '/login'
    | '/register'
    | '/account-requests'
    | '/borrow-requests'
    | '/dashboard'
    | '/user'
    | '/profile'
    | '/'
    | '/books-management/create'
    | '/books/$id'
    | '/books-management/'
    | '/books/'
    | '/books-management/$id/edit'
    | '/books-management/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/account-requests'
    | '/borrow-requests'
    | '/dashboard'
    | '/user'
    | '/profile'
    | '/'
    | '/books-management/create'
    | '/books/$id'
    | '/books-management'
    | '/books'
    | '/books-management/$id/edit'
    | '/books-management/$id'
  id:
    | '__root__'
    | '/_auth'
    | '/_dashboard'
    | '/_web'
    | '/_dashboard/books-management'
    | '/_web/books'
    | '/_auth/login'
    | '/_auth/register'
    | '/_dashboard/account-requests'
    | '/_dashboard/borrow-requests'
    | '/_dashboard/dashboard'
    | '/_dashboard/user'
    | '/_web/profile'
    | '/_web/'
    | '/_dashboard/books-management/create'
    | '/_web/books/$id'
    | '/_dashboard/books-management/'
    | '/_web/books/'
    | '/_dashboard/books-management/$id/edit'
    | '/_dashboard/books-management/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  WebRouteRoute: typeof WebRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_web': {
      id: '/_web'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WebRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_web/': {
      id: '/_web/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof WebIndexRouteImport
      parentRoute: typeof WebRouteRoute
    }
    '/_web/profile': {
      id: '/_web/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof WebProfileRouteImport
      parentRoute: typeof WebRouteRoute
    }
    '/_dashboard/user': {
      id: '/_dashboard/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof DashboardUserRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/dashboard': {
      id: '/_dashboard/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardDashboardRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/borrow-requests': {
      id: '/_dashboard/borrow-requests'
      path: '/borrow-requests'
      fullPath: '/borrow-requests'
      preLoaderRoute: typeof DashboardBorrowRequestsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/account-requests': {
      id: '/_dashboard/account-requests'
      path: '/account-requests'
      fullPath: '/account-requests'
      preLoaderRoute: typeof DashboardAccountRequestsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_web/books': {
      id: '/_web/books'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof WebBooksRouteRouteImport
      parentRoute: typeof WebRouteRoute
    }
    '/_dashboard/books-management': {
      id: '/_dashboard/books-management'
      path: '/books-management'
      fullPath: '/books-management'
      preLoaderRoute: typeof DashboardBooksManagementRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_web/books/': {
      id: '/_web/books/'
      path: '/'
      fullPath: '/books/'
      preLoaderRoute: typeof WebBooksIndexRouteImport
      parentRoute: typeof WebBooksRouteRoute
    }
    '/_dashboard/books-management/': {
      id: '/_dashboard/books-management/'
      path: '/'
      fullPath: '/books-management/'
      preLoaderRoute: typeof DashboardBooksManagementIndexRouteImport
      parentRoute: typeof DashboardBooksManagementRouteRoute
    }
    '/_web/books/$id': {
      id: '/_web/books/$id'
      path: '/$id'
      fullPath: '/books/$id'
      preLoaderRoute: typeof WebBooksIdRouteImport
      parentRoute: typeof WebBooksRouteRoute
    }
    '/_dashboard/books-management/create': {
      id: '/_dashboard/books-management/create'
      path: '/create'
      fullPath: '/books-management/create'
      preLoaderRoute: typeof DashboardBooksManagementCreateRouteImport
      parentRoute: typeof DashboardBooksManagementRouteRoute
    }
    '/_dashboard/books-management/$id/': {
      id: '/_dashboard/books-management/$id/'
      path: '/$id'
      fullPath: '/books-management/$id'
      preLoaderRoute: typeof DashboardBooksManagementIdIndexRouteImport
      parentRoute: typeof DashboardBooksManagementRouteRoute
    }
    '/_dashboard/books-management/$id/edit': {
      id: '/_dashboard/books-management/$id/edit'
      path: '/$id/edit'
      fullPath: '/books-management/$id/edit'
      preLoaderRoute: typeof DashboardBooksManagementIdEditRouteImport
      parentRoute: typeof DashboardBooksManagementRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface DashboardBooksManagementRouteRouteChildren {
  DashboardBooksManagementCreateRoute: typeof DashboardBooksManagementCreateRoute
  DashboardBooksManagementIndexRoute: typeof DashboardBooksManagementIndexRoute
  DashboardBooksManagementIdEditRoute: typeof DashboardBooksManagementIdEditRoute
  DashboardBooksManagementIdIndexRoute: typeof DashboardBooksManagementIdIndexRoute
}

const DashboardBooksManagementRouteRouteChildren: DashboardBooksManagementRouteRouteChildren =
  {
    DashboardBooksManagementCreateRoute: DashboardBooksManagementCreateRoute,
    DashboardBooksManagementIndexRoute: DashboardBooksManagementIndexRoute,
    DashboardBooksManagementIdEditRoute: DashboardBooksManagementIdEditRoute,
    DashboardBooksManagementIdIndexRoute: DashboardBooksManagementIdIndexRoute,
  }

const DashboardBooksManagementRouteRouteWithChildren =
  DashboardBooksManagementRouteRoute._addFileChildren(
    DashboardBooksManagementRouteRouteChildren,
  )

interface DashboardRouteRouteChildren {
  DashboardBooksManagementRouteRoute: typeof DashboardBooksManagementRouteRouteWithChildren
  DashboardAccountRequestsRoute: typeof DashboardAccountRequestsRoute
  DashboardBorrowRequestsRoute: typeof DashboardBorrowRequestsRoute
  DashboardDashboardRoute: typeof DashboardDashboardRoute
  DashboardUserRoute: typeof DashboardUserRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardBooksManagementRouteRoute:
    DashboardBooksManagementRouteRouteWithChildren,
  DashboardAccountRequestsRoute: DashboardAccountRequestsRoute,
  DashboardBorrowRequestsRoute: DashboardBorrowRequestsRoute,
  DashboardDashboardRoute: DashboardDashboardRoute,
  DashboardUserRoute: DashboardUserRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface WebBooksRouteRouteChildren {
  WebBooksIdRoute: typeof WebBooksIdRoute
  WebBooksIndexRoute: typeof WebBooksIndexRoute
}

const WebBooksRouteRouteChildren: WebBooksRouteRouteChildren = {
  WebBooksIdRoute: WebBooksIdRoute,
  WebBooksIndexRoute: WebBooksIndexRoute,
}

const WebBooksRouteRouteWithChildren = WebBooksRouteRoute._addFileChildren(
  WebBooksRouteRouteChildren,
)

interface WebRouteRouteChildren {
  WebBooksRouteRoute: typeof WebBooksRouteRouteWithChildren
  WebProfileRoute: typeof WebProfileRoute
  WebIndexRoute: typeof WebIndexRoute
}

const WebRouteRouteChildren: WebRouteRouteChildren = {
  WebBooksRouteRoute: WebBooksRouteRouteWithChildren,
  WebProfileRoute: WebProfileRoute,
  WebIndexRoute: WebIndexRoute,
}

const WebRouteRouteWithChildren = WebRouteRoute._addFileChildren(
  WebRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  WebRouteRoute: WebRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
